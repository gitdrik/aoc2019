% 1=right, -1=left, 2=up, -2=down 
WireOne = [1,992,2,221,-1,822,2,805,1,667,-2,397,-1,969,2,433,1,918,-2,517,-1,494,2,909,-1,224,-2,738,1,247,-2,312,-1,803,-2,656,-1,571,-2,968,-1,392,-2,332,-1,581,2,487,1,522,-2,780,-1,74,-2,561,-1,246,2,380,-1,125,2,11,1,735,-2,761,1,482,-2,208,1,985,-2,991,-1,352,2,140,-1,586,-2,492,-1,777,2,96,1,682,-2,969,1,775,2,279,1,671,-2,423,1,838,2,907,-1,486,-2,702,-1,432,-2,625,1,463,2,559,1,12,-2,531,1,510,-2,347,1,147,2,949,1,175,2,160,-1,975,-2,627,-1,537,-2,343,-1,406,-2,237,1,953,2,725,-1,996,-2,740,-1,703,-2,996,1,157,2,356,1,247,-2,541,-1,592,-2,345,1,580,2,656,1,50,-2,423,-1,158,2,502,-1,86,2,729,-1,720,-2,464,1,901,-2,739,-1,20,2,21,1,497,-2,14,-1,580,2,610,-1,114,-2,858,1,853,2,550,-1,354,-2,433,-1,507,2,144,1,9,2,422,1,674,2,604,1,107,-2,999,-1,420,2,675,1,538,-2,491,1,84,-2,158,1,303,-2,450,-1,616,2,938,-1,162,2,102,-1,160,2,275,-1,281,-2,164,-1,254,2,103,1,60,-2,707,1,655,2,128,-1,907,2,225,-1,292,2,919,1,517,-2,276,1,308,-2,113,-1,455,2,584,1,899,2,321,-1,417,2,449,-1,780,2,387,-1,579,2,224,-1,192,-2,325,-1,626,2,145,1,178,-2,162,-1,18,-2,469,1,169,2,694,1,162,-2,806,-1,10,2,979,-1,944,-2,304,1,719,-2,253,-1,343,-2,711,1,429,-2,933,1,445,-2,772,1,230,-2,407,1,335,2,883,-1,900,-2,377,1,413,-2,44,1,805,-2,378,1,421,-2,860,-1,597,2,63,-1,583,-2,561,1,235,-2,502,-1,37,2,29,-1,381,2,803,1,588,-2,972,1,678,-2,223,-1,440,2,835,1,88,-2,16,1,529,-2,867,1,742,2,25,1,353,-2,952,1,31,-2,202,1,737,-2,744,1,765,2,154,-1,969,2,851,-1,22,2,165,-1,12,-2,457,1,635,2,829,-1,996,-2,871,-1,397,2,995,1,215,-2,505,1,93,2,12,1,183,-2,920,-1,442,-2,393,-1,919,-2,803,1,22,-2,806,1,776,2,558,1,263,-2,222,1,111,-2,530,-1,908,-2,640,1,351,-2,172,1,315,2,731,1,25,2,718,-1,172,-2,145,-1,606,2,803,1,837,2,310,-1,607,-2,523,1,271,2,927,1,3,2,518,1,754,-2,322,-1,924,-2,256,-1,997,2,153,-1,904,-2,745,-1,475,2,346,-1,979,-2,658,1,208,2,924,-1,484,2,961,1,94,-2,283,-1,79,2,927,1,122,-2,513,-1,806,-2,480,-1,971,2,340,1,328,-2,427,-1,494];
WireTwo = [-1,998,2,308,1,889,-2,471,1,719,2,326,-1,6,2,802,-1,608,2,149,1,454,2,6,1,837,2,255,-1,720,-2,60,-1,426,-2,525,-1,190,2,995,1,676,2,172,1,910,2,645,1,249,-2,725,1,355,2,668,-1,988,2,253,-1,820,-2,266,1,836,-2,750,1,998,2,113,-1,502,2,634,-1,620,2,903,-1,542,-2,426,-1,497,-2,766,1,930,2,415,1,655,-2,676,-1,694,-2,548,-1,280,2,895,-1,899,2,235,1,912,-2,257,1,161,-2,834,1,88,-2,379,-1,723,2,508,-1,604,-2,1,1,706,-2,321,1,725,2,986,1,52,-2,741,-1,738,-2,810,1,595,2,352,-1,835,-2,712,1,797,-2,332,-1,451,-2,145,-1,608,2,940,1,886,-2,945,1,929,-2,4,1,332,-2,303,-1,877,-2,927,1,686,2,762,-1,588,-2,496,1,352,-2,516,1,355,-2,299,-1,459,-2,831,1,9,2,322,1,635,2,895,-1,127,2,27,1,996,-2,491,-1,360,2,921,-1,146,2,833,-1,420,-2,60,1,32,-2,936,1,815,-2,451,1,715,2,570,1,889,-2,35,1,135,2,814,-1,559,-2,141,-1,470,2,410,-1,711,-2,668,-1,196,2,42,1,989,2,448,-1,875,2,417,1,554,2,61,1,259,-2,111,-1,177,-2,147,-1,925,-2,427,1,911,2,667,-1,209,2,641,-1,516,2,521,1,373,-2,165,-1,91,2,594,1,968,2,536,-1,694,2,270,1,602,2,92,-1,158,2,321,1,422,-2,851,-1,73,-2,492,-1,698,-2,950,-1,988,2,48,-1,184,-2,99,1,67,-2,168,1,269,-2,918,-1,645,-2,736,-1,597,2,104,-1,427,2,72,1,568,-2,749,1,16,2,190,-1,146,-2,911,-1,820,-2,275,1,12,2,402,1,461,-2,595,-1,103,-2,326,1,948,2,288,-1,1,-2,786,1,698,-2,286,-1,557,2,283,1,278,2,327,1,457,-2,136,-1,878,-2,23,-1,371,2,836,1,987,2,695,1,904,2,395,1,869,2,276,1,310,-2,843,-1,994,-2,209,1,554,2,653,-1,924,2,659,1,695,2,779,-1,427,2,504,1,711,-2,679,1,191,-2,775,1,816,-2,293,-1,415,-2,323,1,505,2,154,1,966,2,446,1,837,2,707,-1,591,-2,593,-1,696,2,168,1,35,2,905,1,141,2,708,-1,772,-2,898,1,254,2,612,1,934,2,114,1,912,-2,576,-1,721,-2,965,1,731,2,737,1,494,-2,760,1,909,-2,244,1,662,-2,863,-1,23,-2,298,-1,234,-2,476,-1,571,-2,786,-1,48,2,960,-1,377,2,134,1,335,-2,453,1,203,-2,120,-1,27,2,365,1,254,2,446,1,738,-2,919,-1,42,2,529,1,31,-2,104,1,583,2,272,1,867,2,834,-1,43,-2,220,1,424];

%test
%WireOne = [1, 75,-2,30,1, 83,2,83,-1,12,-2,49,1, 71,2,7,-1,72];
%WireTwo = [2,62,1, 66,2,55,1, 34,-2,71,1, 55,-2,58,1, 83];


% make wire coordinate lists
One = [[0,0]];
for i = 1:2:size(WireOne,2)
  if WireOne(i) == 1
    WireEnd = One(floor(i/2)+1,:) + [WireOne(i+1),0];
  elseif WireOne(i) == -1
    WireEnd = One(floor(i/2)+1,:) - [WireOne(i+1),0];
  elseif WireOne(i) == 2
    WireEnd = One(floor(i/2)+1,:) + [0, WireOne(i+1)];
  else
    WireEnd = One(floor(i/2)+1,:) - [0, WireOne(i+1)];
  end
  One = [One; WireEnd];
end

Two = [[0,0]];
for i = 1:2:size(WireTwo,2)
  if WireTwo(i) == 1
    WireEnd = Two(floor(i/2)+1,:) + [WireTwo(i+1),0];
  elseif WireTwo(i) == -1
    WireEnd = Two(floor(i/2)+1,:) - [WireTwo(i+1),0];
  elseif WireTwo(i) == 2
    WireEnd = Two(floor(i/2)+1,:) + [0, WireTwo(i+1)];
  else
    WireEnd = Two(floor(i/2)+1,:) - [0, WireTwo(i+1)];
  end
  Two = [Two; WireEnd];
end



% Find intersections
Cross = [];
oneStep = [];
oneSteps = 0;
% loop through all wire one sections
for i = 1:(size(One,1)-1)
  % loop thought all wireone positions in section
  for onex = One(i,1):sign(One(i+1,1)-One(i,1)+0.25):One(i+1,1)
    for oney = One(i,2):sign(One(i+1,2)-One(i,2)+0.25):One(i+1,2)
      % check if any wire two section crosses
      for j = 1:(size(Two,1)-1)
        if (min(Two(j,1), Two(j+1,1)) <= onex) & (onex <= max(Two(j,1), Two(j+1,1))) &...
           (min(Two(j,2), Two(j+1,2)) <= oney) & (oney <= max(Two(j,2), Two(j+1,2)))
          % We have a cross
          Cross = [Cross; [onex, oney]];
          oneStep = [oneStep; oneSteps];
          oneSteps
        end
      end
      oneSteps = oneSteps + 1;
    end
  end
  oneSteps = oneSteps - 1;
end



twoStep = [];
% Calculate steps to each intersection for second wire
% loop through crossings
for j = 1:size(Cross, 1)
  % loop through wire
  twoSteps = 0;
  for i = 1:(size(Two,1)-1)
    % loop thought all positions in section
    for x = Two(i,1):sign(Two(i+1,1)-Two(i,1)+0.25):Two(i+1,1)
      for y = Two(i,2):sign(Two(i+1,2)-Two(i,2)+0.25):Two(i+1,2)
        if [x, y] == Cross(j,:)
          twoStep = [twoStep; twoSteps];
          twoSteps
        end
        twoSteps = twoSteps + 1;
      end
    end
    twoSteps = twoSteps - 1;
  end
end

steps = oneStep + twoStep
